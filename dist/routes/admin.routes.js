"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const router = express_1.default.Router();
const passport_1 = __importDefault(require("passport"));
require("../middlewares/isAuth");
const multer_1 = __importDefault(require("multer"));
const upload = multer_1.default();
const auth = passport_1.default.authenticate("jwt", { session: false });
const admin_controllers_1 = __importDefault(require("../controllers/admin.controllers"));
const isAdmin_1 = require("../middlewares/isAdmin");
router.post("/login", admin_controllers_1.default.loginAdmin);
router.get("/", auth, isAdmin_1.isAdmin, admin_controllers_1.default.viewAdmin);
router.post("/createRestaurant", auth, isAdmin_1.isAdmin, admin_controllers_1.default.addRestaurant);
router.post("/addAddressToRest/:rId", auth, isAdmin_1.isAdmin, admin_controllers_1.default.addAddressToRestaurant);
router.post("/createFood/:restaurantId", auth, isAdmin_1.isAdmin, upload.array("photos", 4), admin_controllers_1.default.addDish);
router.post("/createIngredient", auth, isAdmin_1.isAdmin, admin_controllers_1.default.addIngredient);
router.post("/address", auth, isAdmin_1.isAdmin, admin_controllers_1.default.addAddress);
router.post("/restaurant/address/:restaurantId", auth, isAdmin_1.isAdmin, admin_controllers_1.default.addRestaurantAddress);
router.post("/foodingredient/:foodId/:IngId", auth, isAdmin_1.isAdmin, admin_controllers_1.default.addIngredientToFood);
router.delete("/foodingredient/:foodId/:IngId", auth, isAdmin_1.isAdmin, admin_controllers_1.default.removeIngredientToFood);
router.get("/restaurants", auth, isAdmin_1.isAdmin, admin_controllers_1.default.getAllRestaurant);
router.get("/restaurants/:Rid", auth, isAdmin_1.isAdmin, admin_controllers_1.default.getSpecificRestaurant);
router.get("/food", auth, isAdmin_1.isAdmin, admin_controllers_1.default.getAllDishes);
router.get("/foodingredient", auth, isAdmin_1.isAdmin, admin_controllers_1.default.getAllDishesAndIngredients);
router.get("/ingredients", auth, isAdmin_1.isAdmin, admin_controllers_1.default.getAllIngredients);
router.put("/restaurant/:Rid", auth, isAdmin_1.isAdmin, admin_controllers_1.default.restaurantClosed);
router.put("/food/:Fid", auth, isAdmin_1.isAdmin, admin_controllers_1.default.dishOver);
router.delete("/restaurants/:rId", auth, isAdmin_1.isAdmin, admin_controllers_1.default.DeleteSpecificRestaurant);
router.delete("/food/:foodId", auth, isAdmin_1.isAdmin, admin_controllers_1.default.DeleteSpecificFood);
router.delete("/ingredients/:ingredientId", auth, isAdmin_1.isAdmin, admin_controllers_1.default.DeleteSpecificIngredient);
router.get("/order", auth, isAdmin_1.isAdmin, admin_controllers_1.default.ViewAllOrders);
router.get("/supervision", auth, isAdmin_1.isAdmin, admin_controllers_1.default.ViewAssignedOrders);
router.put("/order/:Oid", auth, isAdmin_1.isAdmin, admin_controllers_1.default.ControlOrders);
router.post("/delivery", auth, isAdmin_1.isAdmin, admin_controllers_1.default.addDeliveryPerson);
router.get("/delivery", auth, isAdmin_1.isAdmin, admin_controllers_1.default.ViewDeliveryPerson);
router.get("/coupon", auth, isAdmin_1.isAdmin, admin_controllers_1.default.viewAllCoupons);
router.post("/coupon", auth, isAdmin_1.isAdmin, admin_controllers_1.default.addCoupon);
router.patch("/coupon/:couponId", auth, isAdmin_1.isAdmin, admin_controllers_1.default.changeCoupon);
router.patch("/restaurant/:Rid", auth, isAdmin_1.isAdmin, admin_controllers_1.default.changeRestaurantDiscounts);
exports.default = router;
//# sourceMappingURL=admin.routes.js.map